--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -2575,6 +2575,7 @@
     "i18n/time_formatting.h",
     "i18n/timezone.cc",
     "i18n/timezone.h",
+    "i18n/uchar.h",
     "i18n/unicodestring.h",
     "i18n/utf8_validator_tables.cc",
     "i18n/utf8_validator_tables.h",
--- a/base/i18n/break_iterator.cc
+++ b/base/i18n/break_iterator.cc
@@ -7,6 +7,7 @@
 #include <stdint.h>
 
 #include "base/check.h"
+#include "base/i18n/uchar.h"
 #include "base/lazy_instance.h"
 #include "base/notreached.h"
 #include "base/synchronization/lock.h"
@@ -165,9 +166,9 @@
       iter_ = line_break_cache.Pointer()->Lease(status);
       break;
     case RULE_BASED:
-      iter_ =
-          ubrk_openRules(rules_.c_str(), static_cast<int32_t>(rules_.length()),
-                         nullptr, 0, &parse_error, &status);
+      iter_ = ubrk_openRules(ToUCharPtr(rules_.c_str()),
+                             static_cast<int32_t>(rules_.length()), nullptr, 0,
+                             &parse_error, &status);
       if (U_FAILURE(status)) {
         NOTREACHED() << "ubrk_openRules failed to parse rule string at line "
                      << parse_error.line << ", offset " << parse_error.offset;
@@ -183,7 +184,8 @@
   }
 
   if (string_.data() != nullptr) {
-    ubrk_setText(static_cast<UBreakIterator*>(iter_), string_.data(),
+    ubrk_setText(static_cast<UBreakIterator*>(iter_),
+                 ToUCharPtr(string_.data()),
                  static_cast<int32_t>(string_.size()), &status);
     if (U_FAILURE(status)) {
       return false;
@@ -233,7 +235,8 @@
 
 bool BreakIterator::SetText(const char16_t* text, const size_t length) {
   UErrorCode status = U_ZERO_ERROR;
-  ubrk_setText(static_cast<UBreakIterator*>(iter_), text, length, &status);
+  ubrk_setText(static_cast<UBreakIterator*>(iter_), ToUCharPtr(text), length,
+               &status);
   pos_ = 0;  // implicit when ubrk_setText is done
   prev_ = npos;
   if (U_FAILURE(status)) {
--- a/base/i18n/case_conversion.cc
+++ b/base/i18n/case_conversion.cc
@@ -8,6 +8,7 @@
 
 #include <string>
 
+#include "base/i18n/uchar.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/string_util.h"
 #include "third_party/icu/source/common/unicode/uchar.h"
@@ -65,9 +66,10 @@
     // ICU won't terminate the string if there's not enough room for the null
     // terminator, but will otherwise. So we don't need to save room for that.
     // Don't use WriteInto, which assumes null terminators.
-    int32_t new_length = case_mapper(
-        &dest[0], saturated_cast<int32_t>(dest.size()), string.data(),
-        saturated_cast<int32_t>(string.size()), &error);
+    int32_t new_length =
+        case_mapper(ToUCharPtr(&dest[0]), saturated_cast<int32_t>(dest.size()),
+                    ToUCharPtr(string.data()),
+                    saturated_cast<int32_t>(string.size()), &error);
     dest.resize(new_length);
   } while (error == U_BUFFER_OVERFLOW_ERROR);
   return dest;
--- a/base/i18n/file_util_icu_unittest.cc
+++ b/base/i18n/file_util_icu_unittest.cc
@@ -53,55 +53,55 @@
 // unicode characters. For Mac they should be converted to UTF-8, for Windows to
 // wide.
 static const struct FileUtilICUTestCases {
-  const char16_t* bad_name;
-  const char16_t* good_name_with_dash;
-  const char16_t* good_name_with_space;
+  const wchar_t* bad_name;
+  const wchar_t* good_name_with_dash;
+  const wchar_t* good_name_with_space;
 } kIllegalCharacterCases[] = {
-    {u"bad*file:name?.jpg", u"bad-file-name-.jpg", u"bad file name .jpg"},
-    {u"**********::::.txt", u"--------------.txt", u"_.txt"},
+    {L"bad*file:name?.jpg", L"bad-file-name-.jpg", L"bad file name .jpg"},
+    {L"**********::::.txt", L"--------------.txt", L"_.txt"},
     // We can't use UCNs (universal character names) for C0/C1 characters and
     // U+007F, but \x escape is interpreted by MSVC and gcc as we intend.
-    {u"bad\x0003\x0091 file\u200E\u200Fname.png", u"bad-- file--name.png",
-     u"bad   file  name.png"},
-    {u"bad*file\\?name.jpg", u"bad-file--name.jpg", u"bad file  name.jpg"},
-    {u"\t  bad*file\\name/.jpg", u"-  bad-file-name-.jpg",
-     u"bad file name .jpg"},
-    {u"this_file_name is okay!.mp3", u"this_file_name is okay!.mp3",
-     u"this_file_name is okay!.mp3"},
-    {u"\u4E00\uAC00.mp3", u"\u4E00\uAC00.mp3", u"\u4E00\uAC00.mp3"},
-    {u"\u0635\u200C\u0644.mp3", u"\u0635-\u0644.mp3", u"\u0635 \u0644.mp3"},
-    {u"\U00010330\U00010331.mp3", u"\U00010330\U00010331.mp3",
-     u"\U00010330\U00010331.mp3"},
+    {L"bad\x0003\x0091 file\u200E\u200Fname.png", L"bad-- file--name.png",
+     L"bad   file  name.png"},
+    {L"bad*file\\?name.jpg", L"bad-file--name.jpg", L"bad file  name.jpg"},
+    {L"\t  bad*file\\name/.jpg", L"-  bad-file-name-.jpg",
+     L"bad file name .jpg"},
+    {L"this_file_name is okay!.mp3", L"this_file_name is okay!.mp3",
+     L"this_file_name is okay!.mp3"},
+    {L"\u4E00\uAC00.mp3", L"\u4E00\uAC00.mp3", L"\u4E00\uAC00.mp3"},
+    {L"\u0635\u200C\u0644.mp3", L"\u0635-\u0644.mp3", L"\u0635 \u0644.mp3"},
+    {L"\U00010330\U00010331.mp3", L"\U00010330\U00010331.mp3",
+     L"\U00010330\U00010331.mp3"},
     // Unassigned codepoints are ok.
-    {u"\u0378\U00040001.mp3", u"\u0378\U00040001.mp3", u"\u0378\U00040001.mp3"},
+    {L"\u0378\U00040001.mp3", L"\u0378\U00040001.mp3", L"\u0378\U00040001.mp3"},
     // Non-characters are not allowed.
-    {u"bad\uFFFFfile\U0010FFFEname.jpg", u"bad-file-name.jpg",
-     u"bad file name.jpg"},
-    {u"bad\uFDD0file\uFDEFname.jpg", u"bad-file-name.jpg",
-     u"bad file name.jpg"},
+    {L"bad\uFFFFfile\U0010FFFEname.jpg", L"bad-file-name.jpg",
+     L"bad file name.jpg"},
+    {L"bad\uFDD0file\uFDEFname.jpg", L"bad-file-name.jpg",
+     L"bad file name.jpg"},
     // CVE-2014-9390
-    {u"(\u200C.\u200D.\u200E.\u200F.\u202A.\u202B.\u202C.\u202D.\u202E.\u206A."
-     u"\u206B.\u206C.\u206D.\u206F.\uFEFF)",
-     u"(-.-.-.-.-.-.-.-.-.-.-.-.-.-.-)", u"( . . . . . . . . . . . . . . )"},
-    {u"config~1", u"config-1", u"config 1"},
-    {u" _ ", u"-_-", u"_"},
-    {u" ", u"-", u"_ _"},
-    {u"\u2008.(\u2007).\u3000", u"-.(\u2007).-", u"(\u2007)"},
-    {u"     ", u"-   -", u"_     _"},
-    {u".    ", u"-   -", u"_.    _"}};
+    {L"(\u200C.\u200D.\u200E.\u200F.\u202A.\u202B.\u202C.\u202D.\u202E.\u206A."
+     L"\u206B.\u206C.\u206D.\u206F.\uFEFF)",
+     L"(-.-.-.-.-.-.-.-.-.-.-.-.-.-.-)", L"( . . . . . . . . . . . . . . )"},
+    {L"config~1", L"config-1", L"config 1"},
+    {L" _ ", L"-_-", L"_"},
+    {L" ", L"-", L"_ _"},
+    {L"\u2008.(\u2007).\u3000", L"-.(\u2007).-", L"(\u2007)"},
+    {L"     ", L"-   -", L"_     _"},
+    {L".    ", L"-   -", L"_.    _"}};
 
 #if defined(OS_WIN) || defined(OS_APPLE) || defined(OS_POSIX)
 
 TEST_F(FileUtilICUTest, ReplaceIllegalCharactersInPathTest) {
   for (auto i : kIllegalCharacterCases) {
 #if defined(OS_WIN)
-    std::wstring bad_name = UTF16ToWide(i.bad_name);
+    std::wstring bad_name = i.bad_name;
     ReplaceIllegalCharactersInPath(&bad_name, '-');
-    EXPECT_EQ(UTF16ToWide(i.good_name_with_dash), bad_name);
+    EXPECT_EQ(i.good_name_with_dash, bad_name);
 #else
-    std::string bad_name = UTF16ToUTF8(i.bad_name);
+    std::string bad_name = i.bad_name;
     ReplaceIllegalCharactersInPath(&bad_name, '-');
-    EXPECT_EQ(UTF16ToUTF8(i.good_name_with_dash), bad_name);
+    EXPECT_EQ(i.good_name_with_dash, bad_name);
 #endif
   }
 }
--- a/base/i18n/icu_string_conversions.cc
+++ b/base/i18n/icu_string_conversions.cc
@@ -11,6 +11,7 @@
 #include <vector>
 
 #include "base/check.h"
+#include "base/i18n/uchar.h"
 #include "base/notreached.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
@@ -108,8 +109,8 @@
 
   // ucnv_fromUChars returns size not including terminating null
   int actual_size =
-      ucnv_fromUChars(converter, &(*encoded)[0], encoded_max_length, src.data(),
-                      src.length(), &status);
+      ucnv_fromUChars(converter, &(*encoded)[0], encoded_max_length,
+                      i18n::ToUCharPtr(src.data()), src.length(), &status);
   encoded->resize(actual_size);
   ucnv_close(converter);
   if (U_SUCCESS(status))
@@ -180,9 +181,10 @@
 
   SetUpErrorHandlerForToUChars(on_error, converter, &status);
   std::unique_ptr<char16_t[]> buffer(new char16_t[uchar_max_length]);
-  int actual_size = ucnv_toUChars(
-      converter, buffer.get(), static_cast<int>(uchar_max_length),
-      encoded.data(), static_cast<int>(encoded.length()), &status);
+  int actual_size =
+      ucnv_toUChars(converter, i18n::ToUCharPtr(buffer.get()),
+                    static_cast<int>(uchar_max_length), encoded.data(),
+                    static_cast<int>(encoded.length()), &status);
   ucnv_close(converter);
   if (!U_SUCCESS(status)) {
     utf16->clear();  // Make sure the output is empty on error.
--- a/base/i18n/string_search.cc
+++ b/base/i18n/string_search.cc
@@ -5,6 +5,7 @@
 #include <stdint.h>
 
 #include "base/i18n/string_search.h"
+#include "base/i18n/uchar.h"
 
 #include "base/check.h"
 #include "base/check_op.h"
@@ -22,7 +23,7 @@
   const std::u16string& dummy = find_this_;
 
   UErrorCode status = U_ZERO_ERROR;
-  search_ = usearch_open(find_this_.data(), find_this_.size(), dummy.data(),
+  search_ = usearch_open(ToUCharPtr(find_this_.data()), find_this_.size(), ToUCharPtr(dummy.data()),
                          dummy.size(), uloc_getDefault(),
                          nullptr,  // breakiter
                          &status);
@@ -51,7 +52,7 @@
                                       size_t* match_length,
                                       bool forward_search) {
   UErrorCode status = U_ZERO_ERROR;
-  usearch_setText(search_, in_this.data(), in_this.size(), &status);
+  usearch_setText(search_, ToUCharPtr(in_this.data()), in_this.size(), &status);
 
   // Default to basic substring search if usearch fails. According to
   // http://icu-project.org/apiref/icu4c/usearch_8h.html, usearch_open will fail
--- a/base/i18n/unicodestring.h
+++ b/base/i18n/unicodestring.h
@@ -7,6 +7,7 @@
 
 #include <string>
 
+#include "base/i18n/uchar.h"
 #include "third_party/icu/source/common/unicode/unistr.h"
 #include "third_party/icu/source/common/unicode/uvernum.h"
 
@@ -20,7 +21,7 @@
 inline std::u16string UnicodeStringToString16(
     const icu::UnicodeString& unistr) {
 #if U_ICU_VERSION_MAJOR_NUM >= 59
-  return std::u16string(icu::toUCharPtr(unistr.getBuffer()),
+  return std::u16string(ToChar16Ptr(icu::toUCharPtr(unistr.getBuffer())),
                         static_cast<size_t>(unistr.length()));
 #else
   return std::u16string(unistr.getBuffer(),
--- a/base/logging.cc
+++ b/base/logging.cc
@@ -1162,9 +1162,14 @@
 }
 
 std::ostream& std::operator<<(std::ostream& out, const char16_t* str16) {
-  return out << (str16 ? base::StringPiece16(str16) : base::StringPiece16());
+  // TODO(crbug.com/911896): Drop cast once char16_t is char16_t everywhere.
+  return out << (str16 ? base::StringPiece16(
+                             reinterpret_cast<const char16_t*>(str16))
+                       : base::StringPiece16());
 }
 
 std::ostream& std::operator<<(std::ostream& out, const std::u16string& str16) {
-  return out << base::StringPiece16(str16);
+  // TODO(crbug.com/911896): Drop cast once char16_t is char16_t everywhere.
+  return out << base::StringPiece16(
+             reinterpret_cast<const char16_t*>(str16.data()), str16.size());
 }
--- a/chrome/browser/ui/commander/fuzzy_finder.cc
+++ b/chrome/browser/ui/commander/fuzzy_finder.cc
@@ -6,6 +6,7 @@
 
 #include "base/i18n/case_conversion.h"
 #include "base/i18n/char_iterator.h"
+#include "base/i18n/uchar.h"
 #include "base/ranges/algorithm.h"
 #include "base/strings/string_util.h"
 #include "third_party/icu/source/common/unicode/uchar.h"
@@ -75,7 +76,7 @@
 }
 
 size_t LengthInCodePoints(const std::u16string& str) {
-  return u_countChar32(str.data(), str.size());
+  return u_countChar32(base::i18n::ToUCharPtr(str.data()), str.size());
 }
 
 // Returns a positive score if every code point in |needle| is present in
--- a/components/url_formatter/spoof_checks/idn_spoof_checker.cc
+++ b/components/url_formatter/spoof_checks/idn_spoof_checker.cc
@@ -5,6 +5,7 @@
 #include "components/url_formatter/spoof_checks/idn_spoof_checker.h"
 
 #include "base/check_op.h"
+#include "base/i18n/uchar.h"
 #include "base/containers/contains.h"
 #include "base/logging.h"
 #include "base/no_destructor.h"
@@ -358,7 +359,7 @@
     base::StringPiece16 top_level_domain_unicode) {
   UErrorCode status = U_ZERO_ERROR;
   int32_t result =
-      uspoof_check(checker_, label.data(),
+      uspoof_check(checker_, base::i18n::ToUCharPtr(label.data()),
                    base::checked_cast<int32_t>(label.size()), nullptr, &status);
   // If uspoof_check fails (due to library failure), or if any of the checks
   // fail, treat the IDN as unsafe.
--- a/components/url_formatter/url_formatter.cc
+++ b/components/url_formatter/url_formatter.cc
@@ -8,6 +8,7 @@
 #include <utility>
 #include <vector>
 
+#include "base/i18n/uchar.h"
 #include "base/command_line.h"
 #include "base/lazy_instance.h"
 #include "base/numerics/safe_conversions.h"
@@ -438,8 +439,8 @@
     // code units, |status| will be U_BUFFER_OVERFLOW_ERROR and we'll try
     // the conversion again, but with a sufficiently large buffer.
     output_length = uidna_labelToUnicode(
-        uidna, comp.data(), static_cast<int32_t>(comp.size()),
-        &(*out)[original_length], output_length, &info, &status);
+        uidna, base::i18n::ToUCharPtr(comp.data()), static_cast<int32_t>(comp.size()),
+        base::i18n::ToUCharPtr(&(*out)[original_length]), output_length, &info, &status);
   } while ((status == U_BUFFER_OVERFLOW_ERROR && info.errors == 0));
 
   if (U_SUCCESS(status) && info.errors == 0) {
--- a/content/child/browser_font_resource_trusted.cc
+++ b/content/child/browser_font_resource_trusted.cc
@@ -6,6 +6,7 @@
 
 #include <stddef.h>
 
+#include "base/i18n/uchar.h"
 #include "base/macros.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
@@ -70,8 +71,8 @@
     } else {
       bidi_ = ubidi_open();
       UErrorCode uerror = U_ZERO_ERROR;
-      ubidi_setPara(bidi_, text_.data(), text_.size(), run.rtl, nullptr,
-                    &uerror);
+      ubidi_setPara(bidi_, base::i18n::ToUCharPtr(text_.data()), text_.size(),
+                    run.rtl, nullptr, &uerror);
       if (U_SUCCESS(uerror))
         num_runs_ = ubidi_countRuns(bidi_, &uerror);
     }
--- a/third_party/blink/renderer/core/DEPS
+++ b/third_party/blink/renderer/core/DEPS
@@ -4,6 +4,7 @@
     "+base/bits.h",
     "+base/cancelable_callback.h",
     "+base/files/file.h",
+    "+base/i18n/uchar.h",
     "+base/mac/foundation_util.h",
     "+base/mac/mac_util.h",
     "+base/mac/scoped_cftyperef.h",
--- a/third_party/blink/renderer/core/clipboard/clipboard_utilities.cc
+++ b/third_party/blink/renderer/core/clipboard/clipboard_utilities.cc
@@ -30,6 +30,7 @@
 
 #include "third_party/blink/renderer/core/clipboard/clipboard_utilities.h"
 
+#include "base/i18n/uchar.h"
 #include "mojo/public/cpp/base/big_buffer.h"
 #include "net/base/escape.h"
 #include "third_party/blink/renderer/platform/image-encoders/image_encoder.h"
@@ -76,8 +77,9 @@
         {reinterpret_cast<const char*>(str.Characters8()), str.length()});
     return String(result.data(), result.size());
   }
-  auto result = net::EscapeForHTML({str.Characters16(), str.length()});
-  return String(result.data(), result.size());
+  auto result = net::EscapeForHTML(
+      {base::i18n::ToChar16Ptr(str.Characters16()), str.length()});
+  return String(base::i18n::ToUCharPtr(result.data()), result.size());
 }
 
 String URLToImageMarkup(const KURL& url, const String& title) {
--- a/third_party/blink/renderer/core/editing/editor_key_bindings.cc
+++ b/third_party/blink/renderer/core/editing/editor_key_bindings.cc
@@ -26,6 +26,7 @@
 
 #include "third_party/blink/renderer/core/editing/editor.h"
 
+#include "base/i18n/uchar.h"
 #include "third_party/blink/public/common/input/web_input_event.h"
 #include "third_party/blink/renderer/core/editing/commands/editor_command.h"
 #include "third_party/blink/renderer/core/editing/editing_behavior.h"
@@ -93,11 +94,12 @@
     return false;
 
   // Return true to prevent default action. e.g. Space key scroll.
-  if (DispatchBeforeInputInsertText(evt->target()->ToNode(), key_event->text) !=
+  if (DispatchBeforeInputInsertText(evt->target()->ToNode(),
+                                    base::i18n::ToUCharPtr(key_event->text)) !=
       DispatchEventResult::kNotCanceled)
     return true;
 
-  return InsertText(key_event->text, evt);
+  return InsertText(base::i18n::ToUCharPtr(key_event->text), evt);
 }
 
 void Editor::HandleKeyboardEvent(KeyboardEvent* evt) {
--- a/third_party/blink/renderer/core/input/keyboard_event_manager.cc
+++ b/third_party/blink/renderer/core/input/keyboard_event_manager.cc
@@ -6,6 +6,7 @@
 
 #include <memory>
 
+#include "base/i18n/uchar.h"
 #include "build/build_config.h"
 #include "third_party/blink/public/common/input/web_input_event.h"
 #include "third_party/blink/public/mojom/input/focus_type.mojom-blink.h"
@@ -164,7 +165,7 @@
   if ((evt.GetModifiers() & (WebKeyboardEvent::kKeyModifiers &
                              ~WebInputEvent::kShiftKey)) != kAccessKeyModifiers)
     return false;
-  String key = String(evt.unmodified_text);
+  String key = String(base::i18n::ToUCharPtr(evt.unmodified_text));
   Element* elem =
       frame_->GetDocument()->GetElementByAccessKey(key.DeprecatedLower());
   if (!elem)
--- a/third_party/blink/renderer/modules/gamepad/DEPS
+++ b/third_party/blink/renderer/modules/gamepad/DEPS
@@ -14,6 +14,7 @@
     "+third_party/blink/renderer/modules/event_modules.h",
     "+third_party/blink/renderer/modules/gamepad",
     "+third_party/blink/renderer/modules/modules_export.h",
+    "+base/i18n/uchar.h",
     "+base/macros.h",
 
     # For shared metrics.
--- a/third_party/blink/renderer/modules/gamepad/gamepad.cc
+++ b/third_party/blink/renderer/modules/gamepad/gamepad.cc
@@ -25,6 +25,7 @@
 
 #include "third_party/blink/renderer/modules/gamepad/gamepad.h"
 
+#include "base/i18n/uchar.h"
 #include "base/trace_event/trace_event.h"
 #include "third_party/blink/renderer/core/timing/performance.h"
 #include "third_party/blink/renderer/modules/gamepad/gamepad_comparisons.h"
@@ -60,7 +61,7 @@
   GamepadComparisons::HasGamepadConnectionChanged(
       connected(),                            // Old connected.
       device_gamepad.connected,               // New connected.
-      id() != StringView(device_gamepad.id),  // ID changed.
+      id() != StringView(base::i18n::ToUCharPtr(device_gamepad.id)),  // ID changed.
       &newly_connected, nullptr);
 
   SetConnected(device_gamepad.connected);
@@ -75,7 +76,7 @@
   // These fields are not expected to change and will only be written when the
   // gamepad is newly connected.
   if (newly_connected) {
-    SetId(device_gamepad.id);
+    SetId(base::i18n::ToUCharPtr(device_gamepad.id));
     SetMapping(device_gamepad.mapping);
   }
 }
--- a/third_party/blink/renderer/modules/url_pattern/DEPS
+++ b/third_party/blink/renderer/modules/url_pattern/DEPS
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 include_rules = [
+    "+base/i18n/uchar.h",
     "+base/strings/string_util.h",
     "+third_party/liburlpattern",
     "+url/url_canon.h",
--- a/third_party/blink/renderer/modules/url_pattern/url_pattern_canon.cc
+++ b/third_party/blink/renderer/modules/url_pattern/url_pattern_canon.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "base/i18n/uchar.h"
+
 #include "third_party/blink/renderer/modules/url_pattern/url_pattern_canon.h"
 
 #include "third_party/blink/renderer/modules/url_pattern/url_pattern_component.h"
@@ -223,7 +225,7 @@
     result = url::CanonicalizeScheme(
         utf8.data(), url::Component(0, utf8.size()), &canon_output, &component);
   } else {
-    result = url::CanonicalizeScheme(stripped.Characters16(),
+    result = url::CanonicalizeScheme(base::i18n::ToChar16Ptr(stripped.Characters16()),
                                      url::Component(0, stripped.length()),
                                      &canon_output, &component);
   }
@@ -269,9 +271,11 @@
     username16.Ensure16Bit();
     password16.Ensure16Bit();
     result = url::CanonicalizeUserInfo(
-        username16.Characters16(), url::Component(0, username16.length()),
-        password16.Characters16(), url::Component(0, password16.length()),
-        &canon_output, &username_component, &password_component);
+        base::i18n::ToChar16Ptr(username16.Characters16()),
+        url::Component(0, username16.length()),
+        base::i18n::ToChar16Ptr(password16.Characters16()),
+        url::Component(0, password16.length()), &canon_output,
+        &username_component, &password_component);
   }
 
   if (!result) {
@@ -424,7 +428,7 @@
     url::CanonicalizeQuery(utf8.data(), url::Component(0, utf8.size()),
                            /*converter=*/nullptr, &canon_output, &component);
   } else {
-    url::CanonicalizeQuery(stripped.Characters16(),
+    url::CanonicalizeQuery(base::i18n::ToChar16Ptr(stripped.Characters16()),
                            url::Component(0, stripped.length()),
                            /*converter=*/nullptr, &canon_output, &component);
   }
@@ -452,7 +456,7 @@
     url::CanonicalizeRef(utf8.data(), url::Component(0, utf8.size()),
                          &canon_output, &component);
   } else {
-    url::CanonicalizeRef(stripped.Characters16(),
+    url::CanonicalizeRef(base::i18n::ToChar16Ptr(stripped.Characters16()),
                          url::Component(0, stripped.length()), &canon_output,
                          &component);
   }
--- a/third_party/blink/renderer/platform/DEPS
+++ b/third_party/blink/renderer/platform/DEPS
@@ -15,6 +15,7 @@
     "+base/files",
     "+base/containers/flat_map.h",
     "+base/guid.h",
+    "+base/i18n/uchar.h",
     "+base/json",
     "+base/location.h",
     "+base/logging.h",
--- a/third_party/blink/renderer/platform/exported/file_path_conversion.cc
+++ b/third_party/blink/renderer/platform/exported/file_path_conversion.cc
@@ -5,6 +5,7 @@
 #include "third_party/blink/public/platform/file_path_conversion.h"
 
 #include "base/files/file_path.h"
+#include "base/i18n/uchar.h"
 #include "build/build_config.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_utf8_adaptor.h"
@@ -17,8 +18,8 @@
     return base::FilePath();
 
   if (!str.Is8Bit()) {
-    return base::FilePath::FromUTF16Unsafe(
-        base::StringPiece16(str.Characters16(), str.length()));
+    return base::FilePath::FromUTF16Unsafe(base::StringPiece16(
+        base::i18n::ToChar16Ptr(str.Characters16()), str.length()));
   }
 
 #if defined(OS_POSIX)
--- a/third_party/blink/renderer/platform/exported/url_conversion.cc
+++ b/third_party/blink/renderer/platform/exported/url_conversion.cc
@@ -4,6 +4,7 @@
 
 #include "third_party/blink/public/platform/url_conversion.h"
 
+#include "base/i18n/uchar.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_utf8_adaptor.h"
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
@@ -23,7 +24,8 @@
   }
 
   // GURL can consume UTF-16 directly.
-  return GURL(base::StringPiece16(str.Characters16(), str.length()));
+  return GURL(base::StringPiece16(base::i18n::ToChar16Ptr(str.Characters16()),
+                                  str.length()));
 }
 
 }  // namespace blink
--- a/third_party/blink/renderer/platform/exported/web_string.cc
+++ b/third_party/blink/renderer/platform/exported/web_string.cc
@@ -30,6 +30,7 @@
 
 #include "third_party/blink/public/platform/web_string.h"
 
+#include "base/i18n/uchar.h"
 #include "base/strings/string_util.h"
 #include "third_party/blink/renderer/platform/wtf/assertions.h"
 #include "third_party/blink/renderer/platform/wtf/text/ascii_fast_path.h"
@@ -56,7 +57,8 @@
 WebString& WebString::operator=(WebString&&) = default;
 
 WebString::WebString(const WebUChar* data, size_t len)
-    : impl_(StringImpl::Create8BitIfPossible(data, len)) {}
+    : impl_(StringImpl::Create8BitIfPossible(base::i18n::ToUCharPtr(data),
+                                             len)) {}
 
 void WebString::Reset() {
   impl_ = nullptr;
@@ -75,7 +77,8 @@
 }
 
 const WebUChar* WebString::Data16() const {
-  return impl_ && !Is8Bit() ? impl_->Characters16() : nullptr;
+  return impl_ && !Is8Bit() ? base::i18n::ToChar16Ptr(impl_->Characters16())
+                            : nullptr;
 }
 
 std::string WebString::Utf8(UTF8ConversionMode mode) const {
--- a/third_party/blink/renderer/platform/link_hash.cc
+++ b/third_party/blink/renderer/platform/link_hash.cc
@@ -30,6 +30,7 @@
 
 #include "third_party/blink/renderer/platform/link_hash.h"
 
+#include "base/i18n/uchar.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_utf8_adaptor.h"
@@ -52,7 +53,8 @@
                                 relative_utf8.size(), nullptr, buffer, &parsed);
   }
   return url::ResolveRelative(base_utf8.data(), base_utf8.size(),
-                              base.GetParsed(), relative.Characters16(),
+                              base.GetParsed(),
+                              base::i18n::ToChar16Ptr(relative.Characters16()),
                               relative.length(), nullptr, buffer, &parsed);
 }
 
--- a/third_party/blink/renderer/platform/weborigin/kurl.cc
+++ b/third_party/blink/renderer/platform/weborigin/kurl.cc
@@ -29,6 +29,7 @@
 
 #include <algorithm>
 
+#include "base/i18n/uchar.h"
 #include "base/numerics/checked_math.h"
 #include "third_party/blink/renderer/platform/weborigin/known_ports.h"
 #include "third_party/blink/renderer/platform/weborigin/scheme_registry.h"
@@ -104,8 +105,9 @@
   void ConvertFromUTF16(const char16_t* input,
                         int input_length,
                         url::CanonOutput* output) override {
-    std::string encoded = encoding_->Encode(
-        String(input, input_length), WTF::kURLEncodedEntitiesForUnencodables);
+    std::string encoded =
+        encoding_->Encode(String(base::i18n::ToUCharPtr(input), input_length),
+                          WTF::kURLEncodedEntitiesForUnencodables);
     output->Append(encoded.c_str(), static_cast<int>(encoded.length()));
   }
 
@@ -360,7 +362,8 @@
   if (string_.Is8Bit()) {
     url::ExtractFileName(AsURLChar8Subtle(string_), path, &file);
   } else {
-    url::ExtractFileName(string_.Characters16(), path, &file);
+    url::ExtractFileName(base::i18n::ToChar16Ptr(string_.Characters16()), path,
+                         &file);
   }
 
   // Bug: https://bugs.webkit.org/show_bug.cgi?id=21015 this function returns
@@ -383,9 +386,11 @@
   if (!is_valid_ || parsed_.port.len <= 0)
     return 0;
   DCHECK(!string_.IsNull());
-  int port = string_.Is8Bit()
-                 ? url::ParsePort(AsURLChar8Subtle(string_), parsed_.port)
-                 : url::ParsePort(string_.Characters16(), parsed_.port);
+  int port =
+      string_.Is8Bit()
+          ? url::ParsePort(AsURLChar8Subtle(string_), parsed_.port)
+          : url::ParsePort(base::i18n::ToChar16Ptr(string_.Characters16()),
+                           parsed_.port);
   DCHECK_NE(port, url::PORT_UNSPECIFIED);  // Checked port.len <= 0 already.
   DCHECK_NE(port, url::PORT_INVALID);      // Checked is_valid_ already.
 
@@ -789,7 +794,8 @@
     return false;
   return string_.Is8Bit()
              ? url::IsStandard(AsURLChar8Subtle(string_), parsed_.scheme)
-             : url::IsStandard(string_.Characters16(), parsed_.scheme);
+             : url::IsStandard(base::i18n::ToChar16Ptr(string_.Characters16()),
+                               parsed_.scheme);
 }
 
 bool EqualIgnoringFragmentIdentifier(const KURL& a, const KURL& b) {
@@ -842,7 +848,8 @@
   if (string_.Is8Bit()) {
     url::ExtractFileName(AsURLChar8Subtle(string_), parsed_.path, &filename);
   } else {
-    url::ExtractFileName(string_.Characters16(), parsed_.path, &filename);
+    url::ExtractFileName(base::i18n::ToChar16Ptr(string_.Characters16()),
+                         parsed_.path, &filename);
   }
   return filename.begin;
 }
@@ -857,8 +864,8 @@
     return url::FindAndCompareScheme(AsURLChar8Subtle(url), url.length(),
                                      protocol, nullptr);
   }
-  return url::FindAndCompareScheme(url.Characters16(), url.length(), protocol,
-                                   nullptr);
+  return url::FindAndCompareScheme(base::i18n::ToChar16Ptr(url.Characters16()),
+                                   url.length(), protocol, nullptr);
 }
 
 void KURL::Init(const KURL& base,
@@ -890,7 +897,7 @@
                                      charset_converter, &output, &parsed_);
   } else {
     is_valid_ = url::ResolveRelative(base_utf8.data(), base_utf8.size(),
-                                     base.parsed_, relative.Characters16(),
+                                     base.parsed_, base::i18n::ToChar16Ptr(relative.Characters16()),
                                      clampTo<int>(relative.length()),
                                      charset_converter, &output, &parsed_);
   }
--- a/third_party/blink/renderer/platform/weborigin/security_origin.cc
+++ b/third_party/blink/renderer/platform/weborigin/security_origin.cc
@@ -34,6 +34,7 @@
 #include <string>
 #include <utility>
 
+#include "base/i18n/uchar.h"
 #include "base/containers/contains.h"
 #include "net/base/url_util.h"
 #include "services/network/public/cpp/is_potentially_trustworthy.h"
@@ -697,9 +698,9 @@
     *success = url::CanonicalizeHost(
         utf8.data(), url::Component(0, utf8.size()), &canon_output, &out_host);
   } else {
-    *success = url::CanonicalizeHost(host.Characters16(),
-                                     url::Component(0, host.length()),
-                                     &canon_output, &out_host);
+    *success = url::CanonicalizeHost(
+        base::i18n::ToChar16Ptr(host.Characters16()),
+        url::Component(0, host.length()), &canon_output, &out_host);
   }
   return String::FromUTF8(canon_output.data(), canon_output.length());
 }
--- a/third_party/blink/renderer/platform/wtf/date_math.cc
+++ b/third_party/blink/renderer/platform/wtf/date_math.cc
@@ -672,8 +672,9 @@
     // Handle the conversion of localtime to UTC the same way as the
     // latest ECMA 262 spec for Javascript (v8 does that, too).
     static_cast<const icu::BasicTimeZone*>(timezone.get())
-        ->getOffsetFromLocal(ms, UCAL_TZ_LOCAL_FORMER, UCAL_TZ_LOCAL_FORMER,
-                             raw_offset, dst_offset, status);
+        ->getOffsetFromLocal(ms, icu::BasicTimeZone::kFormer,
+                             icu::BasicTimeZone::kFormer, raw_offset,
+                             dst_offset, status);
     DCHECK(U_SUCCESS(status));
     offset = static_cast<int>((raw_offset + dst_offset) / kMsPerMinute);
   }
--- a/third_party/blink/renderer/platform/wtf/text/atomic_string.h
+++ b/third_party/blink/renderer/platform/wtf/text/atomic_string.h
@@ -76,6 +76,10 @@
   AtomicString(const LChar* chars, unsigned length);
   AtomicString(const UChar* chars, unsigned length);
   AtomicString(const UChar* chars);
+  template <typename UCharT = UChar,
+            typename = std::enable_if_t<!std::is_same<UCharT, char16_t>::value>>
+  AtomicString(const char16_t* chars)
+      : AtomicString(reinterpret_cast<const UChar*>(chars)) {}
 
   // Constructing an AtomicString from a String / StringImpl can be expensive if
   // the StringImpl is not already atomic.
--- a/third_party/blink/renderer/platform/wtf/text/string_view.h
+++ b/third_party/blink/renderer/platform/wtf/text/string_view.h
@@ -130,6 +130,12 @@
   StringView(const UChar* chars, unsigned length)
       : impl_(StringImpl::empty16_bit_), bytes_(chars), length_(length) {}
   StringView(const UChar* chars);
+  // TODO(crbug.com/911896): Remove this constructor once `UChar` is `char16_t`
+  // on all platforms.
+  template <typename UCharT = UChar,
+            typename = std::enable_if_t<!std::is_same<UCharT, char16_t>::value>>
+  StringView(const char16_t* chars)
+      : StringView(reinterpret_cast<const UChar*>(chars)) {}
 
 #if DCHECK_IS_ON()
   ~StringView();
--- a/third_party/blink/renderer/platform/wtf/text/wtf_string.h
+++ b/third_party/blink/renderer/platform/wtf/text/wtf_string.h
@@ -83,6 +83,12 @@
 
   // Construct a string with UTF-16 data, from a null-terminated source.
   String(const UChar*);
+  // TODO(crbug.com/911896): Remove this constructor once `UChar` is `char16_t`
+  // on all platforms.
+  template <typename UCharT = UChar,
+            typename = std::enable_if_t<!std::is_same<UCharT, char16_t>::value>>
+  String(const char16_t* chars)
+      : String(reinterpret_cast<const UChar*>(chars)) {}
 
   // Construct a string with latin1 data.
   String(const LChar* characters, unsigned length);
--- a/ui/base/ime/utf_offset_unittest.cc
+++ b/ui/base/ime/utf_offset_unittest.cc
@@ -129,9 +129,12 @@
   };
 
   for (const auto& test_case : kTestCases) {
+    // TODO(crbug.com/911896): Get rid of reinterpret_cast on switching
+    // to char16_t.
+    base::string16 text(reinterpret_cast<const char16_t*>(test_case.str));
     EXPECT_EQ(test_case.expect,
-              Utf8OffsetFromUtf16Offset(test_case.str, test_case.offset))
-        << " at " << test_case.str << "[" << test_case.offset << "]";
+              Utf8OffsetFromUtf16Offset(text, test_case.offset))
+        << " at " << text << "[" << test_case.offset << "]";
   }
 }
 
--- a/ui/base/l10n/l10n_util.cc
+++ b/ui/base/l10n/l10n_util.cc
@@ -20,6 +20,7 @@
 #include "base/i18n/number_formatting.h"
 #include "base/i18n/rtl.h"
 #include "base/i18n/string_compare.h"
+#include "base/i18n/uchar.h"
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/no_destructor.h"
@@ -643,11 +644,11 @@
     if (locale_code[0] == '-' || locale_code[0] == '_') {
       actual_size = uloc_getDisplayCountry(
           locale_code.c_str(), display_locale.c_str(),
-          base::WriteInto(&display_name, kBufferSize), kBufferSize - 1, &error);
+          base::i18n::ToUCharPtr(base::WriteInto(&display_name, kBufferSize)), kBufferSize - 1, &error);
     } else {
       actual_size = uloc_getDisplayName(
           locale_code.c_str(), display_locale.c_str(),
-          base::WriteInto(&display_name, kBufferSize), kBufferSize - 1, &error);
+          base::i18n::ToUCharPtr(base::WriteInto(&display_name, kBufferSize)), kBufferSize - 1, &error);
     }
     if (disallow_default && U_USING_DEFAULT_WARNING == error)
       return std::u16string();
--- a/ui/base/l10n/time_format.cc
+++ b/ui/base/l10n/time_format.cc
@@ -8,6 +8,7 @@
 
 #include "base/check_op.h"
 #include "base/component_export.h"
+#include "base/i18n/uchar.h"
 #include "base/lazy_instance.h"
 #include "base/notreached.h"
 #include "base/numerics/safe_conversions.h"
@@ -144,7 +145,7 @@
   DCHECK_GT(capacity, 1);
   std::u16string result;
   UErrorCode error = U_ZERO_ERROR;
-  time_string.extract(base::WriteInto(&result, capacity), capacity, error);
+  time_string.extract(base::i18n::ToUCharPtr(base::WriteInto(&result, capacity)), capacity, error);
   DCHECK(U_SUCCESS(error));
   return result;
 }
--- a/ui/gfx/bidi_line_iterator.cc
+++ b/ui/gfx/bidi_line_iterator.cc
@@ -5,6 +5,7 @@
 #include "ui/gfx/bidi_line_iterator.h"
 
 #include "base/check.h"
+#include "base/i18n/uchar.h"
 #include "base/notreached.h"
 
 namespace ui {
@@ -45,7 +46,8 @@
   if (U_FAILURE(error))
     return false;
 
-  ubidi_setPara(bidi_, text.data(), static_cast<int>(text.length()),
+  ubidi_setPara(bidi_, base::i18n::ToUCharPtr(text.data()),
+                static_cast<int>(text.length()),
                 GetParagraphLevelForDirection(direction), nullptr, &error);
   return (U_SUCCESS(error));
 }
--- a/ui/gfx/font_fallback_unittest.cc
+++ b/ui/gfx/font_fallback_unittest.cc
@@ -6,6 +6,7 @@
 
 #include <tuple>
 
+#include "base/i18n/uchar.h"
 #include "base/cxx17_backports.h"
 #include "base/strings/string_util.h"
 #include "base/strings/stringprintf.h"
@@ -237,8 +238,8 @@
     // Make a sample text to test the script.
     char16_t text[8];
     UErrorCode errorCode = U_ZERO_ERROR;
-    int text_length =
-        uscript_getSampleString(script, text, base::size(text), &errorCode);
+    int text_length = uscript_getSampleString(
+        script, base::i18n::ToUCharPtr(text), base::size(text), &errorCode);
     if (text_length <= 0 || errorCode != U_ZERO_ERROR)
       continue;
 
--- a/url/url_canon_icu.cc
+++ b/url/url_canon_icu.cc
@@ -9,6 +9,7 @@
 #include <string.h>
 
 #include "base/check.h"
+#include "base/i18n/uchar.h"
 #include "third_party/icu/source/common/unicode/ucnv.h"
 #include "third_party/icu/source/common/unicode/ucnv_cb.h"
 #include "third_party/icu/source/common/unicode/utypes.h"
@@ -94,8 +95,9 @@
   do {
     UErrorCode err = U_ZERO_ERROR;
     char* dest = &output->data()[begin_offset];
-    int required_capacity = ucnv_fromUChars(converter_, dest, dest_capacity,
-                                            input, input_len, &err);
+    int required_capacity =
+        ucnv_fromUChars(converter_, dest, dest_capacity,
+                        base::i18n::ToUCharPtr(input), input_len, &err);
     if (err != U_BUFFER_OVERFLOW_ERROR) {
       output->set_length(begin_offset + required_capacity);
       return;
--- a/url/url_idna_icu.cc
+++ b/url/url_idna_icu.cc
@@ -11,6 +11,7 @@
 #include <ostream>
 
 #include "base/check_op.h"
+#include "base/i18n/uchar.h"
 #include "third_party/icu/source/common/unicode/uidna.h"
 #include "third_party/icu/source/common/unicode/utypes.h"
 #include "url/url_canon_icu.h"
@@ -80,8 +81,10 @@
   while (true) {
     UErrorCode err = U_ZERO_ERROR;
     UIDNAInfo info = UIDNA_INFO_INITIALIZER;
-    int output_length = uidna_nameToASCII(uidna, src, src_len, output->data(),
-                                          output->capacity(), &info, &err);
+    int output_length =
+        uidna_nameToASCII(uidna, base::i18n::ToUCharPtr(src), src_len,
+                          base::i18n::ToUCharPtr(output->data()),
+                          output->capacity(), &info, &err);
 
     // Ignore various errors for web compatibility. The options are specified
     // by the WHATWG URL Standard. See
--- a/v8/src/objects/intl-objects.cc
+++ b/v8/src/objects/intl-objects.cc
@@ -2050,12 +2050,10 @@
   if (is_utc) {
     GetTimeZone()->getOffset(time_ms, false, *raw_offset, *dst_offset, status);
   } else {
-    // Note that casting TimeZone to BasicTimeZone is safe because we know that
-    // icu::TimeZone used here is a BasicTimeZone.
     static_cast<const icu::BasicTimeZone*>(GetTimeZone())
-        ->getOffsetFromLocal(time_ms, UCAL_TZ_LOCAL_FORMER,
-                             UCAL_TZ_LOCAL_FORMER, *raw_offset, *dst_offset,
-                             status);
+        ->getOffsetFromLocal(time_ms, icu::BasicTimeZone::kFormer,
+                             icu::BasicTimeZone::kFormer, *raw_offset,
+                             *dst_offset, status);
   }
 
   return U_SUCCESS(status);
--- a/v8/src/objects/intl-objects.h
+++ b/v8/src/objects/intl-objects.h
@@ -21,7 +21,7 @@
 #include "unicode/locid.h"
 #include "unicode/uversion.h"
 
-#define V8_MINIMUM_ICU_VERSION 69
+#define V8_MINIMUM_ICU_VERSION 67
 
 namespace U_ICU_NAMESPACE {
 class BreakIterator;
